{"title":"HDCP Encryption/Decryption Code","uid":5863170,"size":14374,"categoryP":"applications","categoryS":"unix","magnet":"?xt=urn:btih:bb16bf2bfb8360d148ab2d0411773776314879e0&amp;dn=HDCP+Encryption%2FDecryption+Code&amp;tr=udp%3A%2F%2Ftracker.openbittorrent.com%3A80&amp;tr=udp%3A%2F%2Fopen.demonii.com%3A1337&amp;tr=udp%3A%2F%2Ftracker.coppersurfer.tk%3A6969&amp;tr=udp%3A%2F%2Fexodus.desync.com%3A6969","seeders":1,"leechers":0,"uploader":"cudacudacuda","files":1,"time":1286044113,"description":" HDCP Encryption/Decryption Code\nRob Johnson (&lt;a class=&quot;__cf_email__&quot; href=&quot;/cdn-cgi/l/email-protection&quot; data-cfemail=&quot;46342924062535683533283f352468232233&quot;&gt;[email&amp;#160;protected]&lt;/a&gt;&lt;script cf-hash='f9e31' type=&quot;text/javascript&quot;&gt;\n/* &lt;![CDATA[ */!function(){try{var t=&quot;currentScript&quot;in document?document.currentScript:function(){for(var t=document.getElementsByTagName(&quot;script&quot;),e=t.length;e--;)if(t[e].getAttribute(&quot;cf-hash&quot;))return t[e]}();if(t&amp;&amp;t.previousSibling){var e,r,n,i,c=t.previousSibling,a=c.getAttribute(&quot;data-cfemail&quot;);if(a){for(e=&quot;&quot;,r=parseInt(a.substr(0,2),16),n=2;a.length-n;n+=2)i=parseInt(a.substr(n,2),16)^r,e+=String.fromCharCode(i);e=document.createTextNode(e),c.parentNode.replaceChild(e,c)}}}catch(u){}}();/* ]]&gt; */&lt;/script&gt;)\nMikhail Rubnich (&lt;a class=&quot;__cf_email__&quot; href=&quot;/cdn-cgi/l/email-protection&quot; data-cfemail=&quot;9ae8eff8f4f3f9f2dafdf7fbf3f6b4f9f5f7&quot;&gt;[email&amp;#160;protected]&lt;/a&gt;&lt;script cf-hash='f9e31' type=&quot;text/javascript&quot;&gt;\n/* &lt;![CDATA[ */!function(){try{var t=&quot;currentScript&quot;in document?document.currentScript:function(){for(var t=document.getElementsByTagName(&quot;script&quot;),e=t.length;e--;)if(t[e].getAttribute(&quot;cf-hash&quot;))return t[e]}();if(t&amp;&amp;t.previousSibling){var e,r,n,i,c=t.previousSibling,a=c.getAttribute(&quot;data-cfemail&quot;);if(a){for(e=&quot;&quot;,r=parseInt(a.substr(0,2),16),n=2;a.length-n;n+=2)i=parseInt(a.substr(n,2),16)^r,e+=String.fromCharCode(i);e=document.createTextNode(e),c.parentNode.replaceChild(e,c)}}}catch(u){}}();/* ]]&gt; */&lt;/script&gt;)\n\nThis is a software implementation of the HDCP encryption algorithm. We are releasing this code in hopes that it might be useful to other people researching or implementing the HDCP protocol.\n\nDOWNLOAD: hdcp-0.3.tgz\nCOMPILE: make\nTEST: ./hdcp -t\n(If there is any &quot;!&quot; in the output, then there was an error)\nBENCHMARK: ./hdcp -S\n\nThe HDCP cipher is designed to be efficient when implemented in hardware, but it is terribly inefficient in software, primarily because it makes extensive use of bit operations. Our implementation uses bit-slicing to achieve high speeds by exploiting bit-level parallelism. We have created a few high-level routines to make it as easy as possible to implement HDCP, as shown in the following example.\n\nGiven Km, REPEATER, and An from the initial HDCP handshake messages, all a decryptor needs to do is:\n\n#define NFRAMES (64) /* NFRAMES must be &lt;= 64 */\n\nvoid HDCP(uint64_t Km, uint64_t REPEATER, uint64_t An, int width, int height)\n{\n  uint64_t Ks, R0, M0, Mi[NFRAMES], Ki[NFRAMES], Ri[NFRAMES], outputs[height][width][NFRAMES];\n  BS_HDCPCipherState hs;\n\n  /* Generate the session key Ks, the checksum R0, and the initial IV M0 */\n  HDCPAuthentication(Km, REPEATER, An, &amp;Ks, &amp;R0, &amp;M0);\n\n  /* Finish HDCP handshake using R0 */\n  /* ... */\n\n  Mi[NFRAMES-1] = M0;  \n  while(/* there's more video to encrypt/decrypt... */) {\n\n    /* Generate the Ki, Ri, Mi, and stream cipher outputs for the next NFRAMES frames */\n    HDCPInitializeMultiFrameState(NFRAMES, Ks, REPEATER, Mi[NFRAMES-1], &amp;hs, Ki, Ri, Mi);\n    HDCPFrameStream(NFRAMES, height, width, &amp;hs, outputs);\n\n    /* xor the next NFRAME frames of video data with outputs... */\n    /* ... */\n  }\n}\n\nSince our implementation is bit-sliced, it can generate the output for up to 64 frames of video in parallel. This is much faster than a non-bit-sliced implementation that generates 1 frame of stream cipher output at a time, but has the disadvantage of requiring a lot of ram to save the outputs for future frames.\n\nThe core cipher code is in hdcp_cipher.[ch]. The example program hdcp.c has two functions of interest:\n\n    print_test_vectors() generates and prints the test vectors from HDCP 1.4, Tables A-3 and A-4. Obviously, they all pass.\n    measure_hdcp_stream_speed() measures the performance for generating stream cipher output and provides an example of using the library.\n\nSome benchmarks on 640x480 frames (using only a single core):\nCPU \tframes/sec\nIntel(R) Xeon(R) CPU 5140 @ 2.33GHz \t181\nIntel(R) Core(TM)2 Duo CPU P9600 @ 2.53GHz \t76\nDecryption of 1080p content is about 7x slower but decryption can be parallelized across multiple cores, so a high-end 64-bit CPU should be able to decrypt 30fps 1080p content using two cores and about 1.6GB of RAM.\nChange Log\n\n0.3\n    Extracted autogenerated bitslicing functions into their own file and (hopefully) fixed compilation problem regarding immediate arguments to psllqi128. \n0.2\n    Patches from James Nobis:\n\n        modify Makefile to work with gmake on *BSD\n        use the __SSE2__ #define provided by gcc\n\n","torrent":{"xt":"urn:btih:bb16bf2bfb8360d148ab2d0411773776314879e0","amp;dn":"HDCP+Encryption%2FDecryption+Code","amp;tr":["udp%3A%2F%2Ftracker.openbittorrent.com%3A80","udp%3A%2F%2Fopen.demonii.com%3A1337","udp%3A%2F%2Ftracker.coppersurfer.tk%3A6969","udp%3A%2F%2Fexodus.desync.com%3A6969"],"infoHash":"bb16bf2bfb8360d148ab2d0411773776314879e0","infoHashBuffer":{"type":"Buffer","data":[187,22,191,43,251,131,96,209,72,171,45,4,17,119,55,118,49,72,121,224]},"announce":[],"urlList":[]}}